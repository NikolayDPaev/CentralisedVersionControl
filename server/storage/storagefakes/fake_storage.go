// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/NikolayDPaev/CentralisedVersionControl/netio"
	"github.com/NikolayDPaev/CentralisedVersionControl/server/servercommit"
	"github.com/NikolayDPaev/CentralisedVersionControl/server/storage"
)

type FakeStorage struct {
	BlobExistsStub        func(string) (bool, error)
	blobExistsMutex       sync.RWMutex
	blobExistsArgsForCall []struct {
		arg1 string
	}
	blobExistsReturns struct {
		result1 bool
		result2 error
	}
	blobExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CommitExistsStub        func(string) (bool, error)
	commitExistsMutex       sync.RWMutex
	commitExistsArgsForCall []struct {
		arg1 string
	}
	commitExistsReturns struct {
		result1 bool
		result2 error
	}
	commitExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CommitListStub        func() []string
	commitListMutex       sync.RWMutex
	commitListArgsForCall []struct {
	}
	commitListReturns struct {
		result1 []string
	}
	commitListReturnsOnCall map[int]struct {
		result1 []string
	}
	CommitSizeStub        func(string) (int64, error)
	commitSizeMutex       sync.RWMutex
	commitSizeArgsForCall []struct {
		arg1 string
	}
	commitSizeReturns struct {
		result1 int64
		result2 error
	}
	commitSizeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	OpenCommitStub        func(string) (*servercommit.Commit, error)
	openCommitMutex       sync.RWMutex
	openCommitArgsForCall []struct {
		arg1 string
	}
	openCommitReturns struct {
		result1 *servercommit.Commit
		result2 error
	}
	openCommitReturnsOnCall map[int]struct {
		result1 *servercommit.Commit
		result2 error
	}
	RecvBlobStub        func(string, netio.Communicator) error
	recvBlobMutex       sync.RWMutex
	recvBlobArgsForCall []struct {
		arg1 string
		arg2 netio.Communicator
	}
	recvBlobReturns struct {
		result1 error
	}
	recvBlobReturnsOnCall map[int]struct {
		result1 error
	}
	SaveCommitStub        func(*servercommit.Commit) error
	saveCommitMutex       sync.RWMutex
	saveCommitArgsForCall []struct {
		arg1 *servercommit.Commit
	}
	saveCommitReturns struct {
		result1 error
	}
	saveCommitReturnsOnCall map[int]struct {
		result1 error
	}
	SendBlobStub        func(string, netio.Communicator) error
	sendBlobMutex       sync.RWMutex
	sendBlobArgsForCall []struct {
		arg1 string
		arg2 netio.Communicator
	}
	sendBlobReturns struct {
		result1 error
	}
	sendBlobReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) BlobExists(arg1 string) (bool, error) {
	fake.blobExistsMutex.Lock()
	ret, specificReturn := fake.blobExistsReturnsOnCall[len(fake.blobExistsArgsForCall)]
	fake.blobExistsArgsForCall = append(fake.blobExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.BlobExistsStub
	fakeReturns := fake.blobExistsReturns
	fake.recordInvocation("BlobExists", []interface{}{arg1})
	fake.blobExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) BlobExistsCallCount() int {
	fake.blobExistsMutex.RLock()
	defer fake.blobExistsMutex.RUnlock()
	return len(fake.blobExistsArgsForCall)
}

func (fake *FakeStorage) BlobExistsCalls(stub func(string) (bool, error)) {
	fake.blobExistsMutex.Lock()
	defer fake.blobExistsMutex.Unlock()
	fake.BlobExistsStub = stub
}

func (fake *FakeStorage) BlobExistsArgsForCall(i int) string {
	fake.blobExistsMutex.RLock()
	defer fake.blobExistsMutex.RUnlock()
	argsForCall := fake.blobExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) BlobExistsReturns(result1 bool, result2 error) {
	fake.blobExistsMutex.Lock()
	defer fake.blobExistsMutex.Unlock()
	fake.BlobExistsStub = nil
	fake.blobExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) BlobExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.blobExistsMutex.Lock()
	defer fake.blobExistsMutex.Unlock()
	fake.BlobExistsStub = nil
	if fake.blobExistsReturnsOnCall == nil {
		fake.blobExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.blobExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) CommitExists(arg1 string) (bool, error) {
	fake.commitExistsMutex.Lock()
	ret, specificReturn := fake.commitExistsReturnsOnCall[len(fake.commitExistsArgsForCall)]
	fake.commitExistsArgsForCall = append(fake.commitExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CommitExistsStub
	fakeReturns := fake.commitExistsReturns
	fake.recordInvocation("CommitExists", []interface{}{arg1})
	fake.commitExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) CommitExistsCallCount() int {
	fake.commitExistsMutex.RLock()
	defer fake.commitExistsMutex.RUnlock()
	return len(fake.commitExistsArgsForCall)
}

func (fake *FakeStorage) CommitExistsCalls(stub func(string) (bool, error)) {
	fake.commitExistsMutex.Lock()
	defer fake.commitExistsMutex.Unlock()
	fake.CommitExistsStub = stub
}

func (fake *FakeStorage) CommitExistsArgsForCall(i int) string {
	fake.commitExistsMutex.RLock()
	defer fake.commitExistsMutex.RUnlock()
	argsForCall := fake.commitExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) CommitExistsReturns(result1 bool, result2 error) {
	fake.commitExistsMutex.Lock()
	defer fake.commitExistsMutex.Unlock()
	fake.CommitExistsStub = nil
	fake.commitExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) CommitExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.commitExistsMutex.Lock()
	defer fake.commitExistsMutex.Unlock()
	fake.CommitExistsStub = nil
	if fake.commitExistsReturnsOnCall == nil {
		fake.commitExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.commitExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) CommitList() []string {
	fake.commitListMutex.Lock()
	ret, specificReturn := fake.commitListReturnsOnCall[len(fake.commitListArgsForCall)]
	fake.commitListArgsForCall = append(fake.commitListArgsForCall, struct {
	}{})
	stub := fake.CommitListStub
	fakeReturns := fake.commitListReturns
	fake.recordInvocation("CommitList", []interface{}{})
	fake.commitListMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) CommitListCallCount() int {
	fake.commitListMutex.RLock()
	defer fake.commitListMutex.RUnlock()
	return len(fake.commitListArgsForCall)
}

func (fake *FakeStorage) CommitListCalls(stub func() []string) {
	fake.commitListMutex.Lock()
	defer fake.commitListMutex.Unlock()
	fake.CommitListStub = stub
}

func (fake *FakeStorage) CommitListReturns(result1 []string) {
	fake.commitListMutex.Lock()
	defer fake.commitListMutex.Unlock()
	fake.CommitListStub = nil
	fake.commitListReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeStorage) CommitListReturnsOnCall(i int, result1 []string) {
	fake.commitListMutex.Lock()
	defer fake.commitListMutex.Unlock()
	fake.CommitListStub = nil
	if fake.commitListReturnsOnCall == nil {
		fake.commitListReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.commitListReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeStorage) CommitSize(arg1 string) (int64, error) {
	fake.commitSizeMutex.Lock()
	ret, specificReturn := fake.commitSizeReturnsOnCall[len(fake.commitSizeArgsForCall)]
	fake.commitSizeArgsForCall = append(fake.commitSizeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CommitSizeStub
	fakeReturns := fake.commitSizeReturns
	fake.recordInvocation("CommitSize", []interface{}{arg1})
	fake.commitSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) CommitSizeCallCount() int {
	fake.commitSizeMutex.RLock()
	defer fake.commitSizeMutex.RUnlock()
	return len(fake.commitSizeArgsForCall)
}

func (fake *FakeStorage) CommitSizeCalls(stub func(string) (int64, error)) {
	fake.commitSizeMutex.Lock()
	defer fake.commitSizeMutex.Unlock()
	fake.CommitSizeStub = stub
}

func (fake *FakeStorage) CommitSizeArgsForCall(i int) string {
	fake.commitSizeMutex.RLock()
	defer fake.commitSizeMutex.RUnlock()
	argsForCall := fake.commitSizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) CommitSizeReturns(result1 int64, result2 error) {
	fake.commitSizeMutex.Lock()
	defer fake.commitSizeMutex.Unlock()
	fake.CommitSizeStub = nil
	fake.commitSizeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) CommitSizeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.commitSizeMutex.Lock()
	defer fake.commitSizeMutex.Unlock()
	fake.CommitSizeStub = nil
	if fake.commitSizeReturnsOnCall == nil {
		fake.commitSizeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.commitSizeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) OpenCommit(arg1 string) (*servercommit.Commit, error) {
	fake.openCommitMutex.Lock()
	ret, specificReturn := fake.openCommitReturnsOnCall[len(fake.openCommitArgsForCall)]
	fake.openCommitArgsForCall = append(fake.openCommitArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OpenCommitStub
	fakeReturns := fake.openCommitReturns
	fake.recordInvocation("OpenCommit", []interface{}{arg1})
	fake.openCommitMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) OpenCommitCallCount() int {
	fake.openCommitMutex.RLock()
	defer fake.openCommitMutex.RUnlock()
	return len(fake.openCommitArgsForCall)
}

func (fake *FakeStorage) OpenCommitCalls(stub func(string) (*servercommit.Commit, error)) {
	fake.openCommitMutex.Lock()
	defer fake.openCommitMutex.Unlock()
	fake.OpenCommitStub = stub
}

func (fake *FakeStorage) OpenCommitArgsForCall(i int) string {
	fake.openCommitMutex.RLock()
	defer fake.openCommitMutex.RUnlock()
	argsForCall := fake.openCommitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) OpenCommitReturns(result1 *servercommit.Commit, result2 error) {
	fake.openCommitMutex.Lock()
	defer fake.openCommitMutex.Unlock()
	fake.OpenCommitStub = nil
	fake.openCommitReturns = struct {
		result1 *servercommit.Commit
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) OpenCommitReturnsOnCall(i int, result1 *servercommit.Commit, result2 error) {
	fake.openCommitMutex.Lock()
	defer fake.openCommitMutex.Unlock()
	fake.OpenCommitStub = nil
	if fake.openCommitReturnsOnCall == nil {
		fake.openCommitReturnsOnCall = make(map[int]struct {
			result1 *servercommit.Commit
			result2 error
		})
	}
	fake.openCommitReturnsOnCall[i] = struct {
		result1 *servercommit.Commit
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) RecvBlob(arg1 string, arg2 netio.Communicator) error {
	fake.recvBlobMutex.Lock()
	ret, specificReturn := fake.recvBlobReturnsOnCall[len(fake.recvBlobArgsForCall)]
	fake.recvBlobArgsForCall = append(fake.recvBlobArgsForCall, struct {
		arg1 string
		arg2 netio.Communicator
	}{arg1, arg2})
	stub := fake.RecvBlobStub
	fakeReturns := fake.recvBlobReturns
	fake.recordInvocation("RecvBlob", []interface{}{arg1, arg2})
	fake.recvBlobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) RecvBlobCallCount() int {
	fake.recvBlobMutex.RLock()
	defer fake.recvBlobMutex.RUnlock()
	return len(fake.recvBlobArgsForCall)
}

func (fake *FakeStorage) RecvBlobCalls(stub func(string, netio.Communicator) error) {
	fake.recvBlobMutex.Lock()
	defer fake.recvBlobMutex.Unlock()
	fake.RecvBlobStub = stub
}

func (fake *FakeStorage) RecvBlobArgsForCall(i int) (string, netio.Communicator) {
	fake.recvBlobMutex.RLock()
	defer fake.recvBlobMutex.RUnlock()
	argsForCall := fake.recvBlobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) RecvBlobReturns(result1 error) {
	fake.recvBlobMutex.Lock()
	defer fake.recvBlobMutex.Unlock()
	fake.RecvBlobStub = nil
	fake.recvBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) RecvBlobReturnsOnCall(i int, result1 error) {
	fake.recvBlobMutex.Lock()
	defer fake.recvBlobMutex.Unlock()
	fake.RecvBlobStub = nil
	if fake.recvBlobReturnsOnCall == nil {
		fake.recvBlobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.recvBlobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) SaveCommit(arg1 *servercommit.Commit) error {
	fake.saveCommitMutex.Lock()
	ret, specificReturn := fake.saveCommitReturnsOnCall[len(fake.saveCommitArgsForCall)]
	fake.saveCommitArgsForCall = append(fake.saveCommitArgsForCall, struct {
		arg1 *servercommit.Commit
	}{arg1})
	stub := fake.SaveCommitStub
	fakeReturns := fake.saveCommitReturns
	fake.recordInvocation("SaveCommit", []interface{}{arg1})
	fake.saveCommitMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) SaveCommitCallCount() int {
	fake.saveCommitMutex.RLock()
	defer fake.saveCommitMutex.RUnlock()
	return len(fake.saveCommitArgsForCall)
}

func (fake *FakeStorage) SaveCommitCalls(stub func(*servercommit.Commit) error) {
	fake.saveCommitMutex.Lock()
	defer fake.saveCommitMutex.Unlock()
	fake.SaveCommitStub = stub
}

func (fake *FakeStorage) SaveCommitArgsForCall(i int) *servercommit.Commit {
	fake.saveCommitMutex.RLock()
	defer fake.saveCommitMutex.RUnlock()
	argsForCall := fake.saveCommitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) SaveCommitReturns(result1 error) {
	fake.saveCommitMutex.Lock()
	defer fake.saveCommitMutex.Unlock()
	fake.SaveCommitStub = nil
	fake.saveCommitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) SaveCommitReturnsOnCall(i int, result1 error) {
	fake.saveCommitMutex.Lock()
	defer fake.saveCommitMutex.Unlock()
	fake.SaveCommitStub = nil
	if fake.saveCommitReturnsOnCall == nil {
		fake.saveCommitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveCommitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) SendBlob(arg1 string, arg2 netio.Communicator) error {
	fake.sendBlobMutex.Lock()
	ret, specificReturn := fake.sendBlobReturnsOnCall[len(fake.sendBlobArgsForCall)]
	fake.sendBlobArgsForCall = append(fake.sendBlobArgsForCall, struct {
		arg1 string
		arg2 netio.Communicator
	}{arg1, arg2})
	stub := fake.SendBlobStub
	fakeReturns := fake.sendBlobReturns
	fake.recordInvocation("SendBlob", []interface{}{arg1, arg2})
	fake.sendBlobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) SendBlobCallCount() int {
	fake.sendBlobMutex.RLock()
	defer fake.sendBlobMutex.RUnlock()
	return len(fake.sendBlobArgsForCall)
}

func (fake *FakeStorage) SendBlobCalls(stub func(string, netio.Communicator) error) {
	fake.sendBlobMutex.Lock()
	defer fake.sendBlobMutex.Unlock()
	fake.SendBlobStub = stub
}

func (fake *FakeStorage) SendBlobArgsForCall(i int) (string, netio.Communicator) {
	fake.sendBlobMutex.RLock()
	defer fake.sendBlobMutex.RUnlock()
	argsForCall := fake.sendBlobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) SendBlobReturns(result1 error) {
	fake.sendBlobMutex.Lock()
	defer fake.sendBlobMutex.Unlock()
	fake.SendBlobStub = nil
	fake.sendBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) SendBlobReturnsOnCall(i int, result1 error) {
	fake.sendBlobMutex.Lock()
	defer fake.sendBlobMutex.Unlock()
	fake.SendBlobStub = nil
	if fake.sendBlobReturnsOnCall == nil {
		fake.sendBlobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendBlobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.blobExistsMutex.RLock()
	defer fake.blobExistsMutex.RUnlock()
	fake.commitExistsMutex.RLock()
	defer fake.commitExistsMutex.RUnlock()
	fake.commitListMutex.RLock()
	defer fake.commitListMutex.RUnlock()
	fake.commitSizeMutex.RLock()
	defer fake.commitSizeMutex.RUnlock()
	fake.openCommitMutex.RLock()
	defer fake.openCommitMutex.RUnlock()
	fake.recvBlobMutex.RLock()
	defer fake.recvBlobMutex.RUnlock()
	fake.saveCommitMutex.RLock()
	defer fake.saveCommitMutex.RUnlock()
	fake.sendBlobMutex.RLock()
	defer fake.sendBlobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Storage = new(FakeStorage)
